//Cau A
#include <stdio.h>
#include <stdlib.h>

// Định nghĩa node
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Định nghĩa list
typedef struct {
    Node* pHead;
    Node* pTail;
} List;

// Khởi tạo danh sách rỗng
void init(List *l) {
    l->pHead = NULL;
    l->pTail = NULL;
}

// Tạo node mới
Node* createNode(int x) {
    Node* p = (Node*)malloc(sizeof(Node));
    if (p == NULL) return NULL;
    p->data = x;
    p->next = NULL;
    return p;
}

// Thêm node vào cuối danh sách
void addTail(List *l, Node* p) {
    if (l->pHead == NULL) {
        l->pHead = p;
        l->pTail = p;
    } else {
        l->pTail->next = p;
        l->pTail = p;
    }
}

// Nhập danh sách
void inputList(List *l, int n) {
    for (int i = 0; i < n; i++) {
        int x;
        scanf("%d", &x);
        Node* p = createNode(x);
        addTail(l, p);
    }
}

// Xuất danh sách
void outputList(List l) {
    Node* p = l.pHead;
    while (p != NULL) {
        printf("%d ", p->data);
        p = p->next;
    }
}

int main() {
    List l;
    init(&l);
    int n;
    scanf("%d", &n);
    inputList(&l, n);
    outputList(l);
    return 0;
}


\\\____________________________///


//Cau B
#include <stdio.h>
#include <stdlib.h>

// Định nghĩa node
typedef struct Node {
    int data;
    struct Node *next;
} NODE;

// Định nghĩa danh sách
typedef struct {
    NODE *pHead;
    NODE *pTail;
} LIST;

// Khởi tạo danh sách rỗng
void Init(LIST *l) {
    l->pHead = l->pTail = NULL;
}

// Tạo node mới
NODE* CreateNode(int x) {
    NODE *p = (NODE*)malloc(sizeof(NODE));
    if (p == NULL) return NULL;
    p->data = x;
    p->next = NULL;
    return p;
}

// Kiểm tra rỗng
int IsEmpty(LIST l) {
    return l.pHead == NULL;
}

// Thêm node vào đầu danh sách
void InsertHead(LIST *l, NODE *p) {
    if (IsEmpty(*l)) {
        l->pHead = l->pTail = p;
    } else {
        p->next = l->pHead;
        l->pHead = p;
    }
}

// Nhập danh sách – dừng khi nhập số 0
void InputList(LIST *l) {
    Init(l);
    int x;
    while (1) {
        scanf("%d", &x);
        if (x == 0) break;
        NODE *p = CreateNode(x);
        if (p != NULL) {
            InsertHead(l, p);
        }
    }
}

// Xuất danh sách
void OutputList(LIST l) {
    NODE *p = l.pHead;
    while (p != NULL) {
        printf("%d ", p->data); // chỉ in số, không in chữ kèm theo
        p = p->next;
    }
}

int main() {
    LIST l;
    InputList(&l);
    OutputList(l);
    return 0;
}



\\\_____________________________///


//Cau C
#include <stdio.h>
#include <stdlib.h>

// Định nghĩa node
typedef struct Node {
    int data;
    struct Node *next;
} NODE;

// Định nghĩa danh sách
typedef struct {
    NODE *pHead;
    NODE *pTail;
} LIST;

// Khởi tạo danh sách rỗng
void Init(LIST *l) {
    l->pHead = l->pTail = NULL;
}

// Tạo node mới
NODE* CreateNode(int x) {
    NODE *p = (NODE*)malloc(sizeof(NODE));
    if (p == NULL) return NULL;
    p->data = x;
    p->next = NULL;
    return p;
}

// Thêm node vào cuối danh sách
void InsertTail(LIST *l, NODE *p) {
    if (l->pHead == NULL) {
        l->pHead = l->pTail = p;
    } else {
        l->pTail->next = p;
        l->pTail = p;
    }
}

// Hàm nhập danh sách
void InputList(LIST *l) {
    Init(l);
    int x;
    while (scanf("%d", &x) && getchar() != '\n') {
        NODE *p = CreateNode(x);
        if (p != NULL) InsertTail(l, p);
    }
    // thêm phần tử cuối cùng vừa nhập
    NODE *p = CreateNode(x);
    if (p != NULL) InsertTail(l, p);
}

// Hàm chèn phần tử y sau phần tử đầu tiên có giá trị x
void InsertAfterValue(LIST *l, int x, int y) {
    NODE *current = l->pHead;
    while (current != NULL) {
        if (current->data == x) {
            NODE *newNode = CreateNode(y);
            if (newNode == NULL) return;
            newNode->next = current->next;
            current->next = newNode;
            if (l->pTail == current) {
                l->pTail = newNode;
            }
            break;
        }
        current = current->next;
    }
}

// Hàm xuất danh sách
void OutputList(LIST l) {
    NODE *p = l.pHead;
    while (p != NULL) {
        printf("%d ", p->data); // chỉ in số
        p = p->next;
    }
}

int main() {
    LIST l;
    InputList(&l);

    int x, y;
    scanf("%d %d", &x, &y);

    InsertAfterValue(&l, x, y);

    OutputList(l);

    return 0;
}



\\\___________________________///


//Cau D
#include <stdio.h>
#include <stdlib.h>

// Định nghĩa node
typedef struct Node {
    int data;
    struct Node *next;
} NODE;

// Định nghĩa danh sách
typedef struct {
    NODE *pHead;
    NODE *pTail;
} LIST;

// Khởi tạo danh sách rỗng
void Init(LIST *l) {
    l->pHead = l->pTail = NULL;
}

// Tạo node mới
NODE* CreateNode(int x) {
    NODE *p = (NODE*)malloc(sizeof(NODE));
    if (p == NULL) return NULL;
    p->data = x;
    p->next = NULL;
    return p;
}

// Thêm node vào cuối danh sách
void InsertTail(LIST *l, NODE *p) {
    if (l->pHead == NULL) {
        l->pHead = l->pTail = p;
    } else {
        l->pTail->next = p;
        l->pTail = p;
    }
}

// Nhập danh sách – dừng khi nhập số 0
void InputList(LIST *l) {
    Init(l);
    int x;
    while (1) {
        scanf("%d", &x);
        if (x == 0) break;
        NODE *p = CreateNode(x);
        if (p != NULL) InsertTail(l, p);
    }
}

// Đếm số nút trong danh sách
int CountNodes(LIST l) {
    int count = 0;
    NODE *p = l.pHead;
    while (p != NULL) {
        count++;
        p = p->next;
    }
    return count;
}

int main() {
    LIST l;
    InputList(&l);
    printf("%d", CountNodes(l));  // chỉ in số lượng nút
    return 0;
}



\\\____________________________///


//Cau E



