#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define MAX 100

typedef struct {
    char a[MAX];
    int top;
} STACK;

void initialize(STACK *stack) {
    stack->top = -1;
}

int isEmpty(STACK *stack) {
    return stack->top == -1;
}

int isFull(STACK *stack) {
    return stack->top == MAX - 1;
}

void push(STACK *stack, char value) {
    if (isFull(stack)) {
        printf("Stack overflow\n");
        return;
    }
    stack->a[++stack->top] = value;
}

char pop(STACK *stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow\n");
        return 0;
    }
    return stack->a[stack->top--];
}

char peek(STACK *stack) {
    if (isEmpty(stack)) {
        return '\0';
    }
    return stack->a[stack->top];
}

int precedence(char op) {
    switch (op) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return 0;
    }
}

int isOperator(char ch) {
    return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^';
}

void infixToPostfix(char *infix, char *postfix) {
    STACK stack;
    initialize(&stack);
    int j = 0;

    for (int i = 0; infix[i] != '\0'; i++) {
        char ch = infix[i];
        if (isalnum(ch)) { // ký tự chữ hoặc số
            postfix[j++] = ch;
        } 
        else if (ch == '(') {
            push(&stack, ch);
        } 
        else if (ch == ')') {
            while (!isEmpty(&stack) && peek(&stack) != '(') {
                postfix[j++] = pop(&stack);
            }
            if (!isEmpty(&stack) && peek(&stack) == '(')
                pop(&stack);
        } 
        else if (isOperator(ch)) {
            while (!isEmpty(&stack) && precedence(peek(&stack)) >= precedence(ch)) {
                postfix[j++] = pop(&stack);
            }
            push(&stack, ch);
        }
    }

    while (!isEmpty(&stack)) {
        postfix[j++] = pop(&stack);
    }
    postfix[j] = '\0';
}

int main() {
    char infix[MAX] = "A+B*(C-D)/E-F";
    char postfix[MAX];
    infixToPostfix(infix, postfix);
    printf("Infix expression: %s\n", infix);
    printf("Postfix expression: %s\n", postfix);
    return 0;
}
